{"version":3,"sources":["components/Navigation.js","components/About.js","App.js","serviceWorker.js","index.js","images/profile_pic.jpg"],"names":["NavItem","props","pageURI","window","location","pathname","search","liClassName","path","react_default","a","createElement","className","href","name","Navigation","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Navigation_NavItem","React","Component","About","src","profile_pic","App","components_Navigation","components_About","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yNAEMA,SAAU,SAAAC,GACd,IAAMC,EAAUC,OAAOC,SAASC,SAASF,OAAOC,SAASE,OACnDC,EAAeN,EAAMO,OAASN,EAAW,kBAAoB,WACnE,OACEO,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,GACbE,EAAAC,EAAAC,cAAA,KAAGE,KAAMZ,EAAMO,KAAMI,UAAU,YAC5BX,EAAMa,KACLb,EAAMO,OAASN,EAAYO,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,aAA8C,OA4BpEG,mLApBX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,OACAJ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBAAiBI,KAAK,SAASC,cAAY,WAAWC,cAAY,uBAAuBC,gBAAc,sBAAsBC,gBAAc,QAAQC,aAAW,qBAC9KZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BU,GAAG,uBAC3Cb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAACY,EAAD,CAASf,KAAK,IAAIM,KAAK,aACvBL,EAAAC,EAAAC,cAACY,EAAD,CAASf,KAAK,aAAaM,KAAK,cAChCL,EAAAC,EAAAC,cAACY,EAAD,CAASf,KAAK,YAAYM,KAAK,aAC/BL,EAAAC,EAAAC,cAACY,EAAD,CAASf,KAAK,YAAYM,KAAK,aAC/BL,EAAAC,EAAAC,cAACY,EAAD,CAASf,KAAK,gBAAgBM,KAAK,2BAdtBU,IAAMC,2BCYhBC,mLAtBX,OACEjB,EAAAC,EAAAC,cAAA,OAAKW,GAAG,IAAIV,UAAU,aACpBH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OAAKgB,IAAKC,IAAahB,UAAU,2BAEnCH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,oBADF,IACiBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uCAAR,kCADjB,IACkGJ,EAAAC,EAAAC,cAAA,WAChGF,EAAAC,EAAAC,cAAA,qBAFF,IAEkBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kCAAR,oBAFlB,IAEgFJ,EAAAC,EAAAC,cAAA,WAC9EF,EAAAC,EAAAC,cAAA,uBAHF,IAGoBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iDAAR,sBAHpB,IAGmGJ,EAAAC,EAAAC,cAAA,WACjGF,EAAAC,EAAAC,cAAA,wBAJF,0EAI2FF,EAAAC,EAAAC,cAAA,aAG7FF,EAAAC,EAAAC,cAAA,4IACAF,EAAAC,EAAAC,cAAA,iEAlBYa,IAAMC,WCeXI,mLAXX,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAAA,OAAKW,GAAG,IAAIV,UAAU,aACpBH,EAAAC,EAAAC,cAACoB,EAAD,eANQN,aCOEO,QACW,cAA7B7B,OAAOC,SAAS6B,UAEe,UAA7B9B,OAAOC,SAAS6B,UAEhB9B,OAAOC,SAAS6B,SAASC,MACvB,iECXNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1adb707a.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavItem = props => {\n  const pageURI = window.location.pathname+window.location.search\n  const liClassName = (props.path === pageURI) ? \"nav-item active\" : \"nav-item\";\n  return (\n    <li className={liClassName}>\n      <a href={props.path} className=\"nav-link\">\n        {props.name}\n        {(props.path === pageURI) ? (<span className=\"sr-only\">(current)</span>) : ''}\n      </a>\n    </li>\n  );\n}\n\nclass Navigation extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">NBM</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n          <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n            <NavItem path=\"/\" name=\"About Me\" />\n            <NavItem path=\"/interests\" name=\"Interests\" />\n            <NavItem path=\"/projects\" name=\"Projects\" />\n            <NavItem path=\"/research\" name=\"Research\" />\n            <NavItem path=\"/publications\" name=\"Publications\" />\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navigation;\n","import React from 'react'\nimport profile_pic from '../images/profile_pic.jpg'\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div id=\"/\" className=\"container\">\n        <h2> ABOUT ME </h2>\n        <h3> Nithish Balachandar Moudhgalya </h3>\n        <div className=\"row\">\n          <div className=\"col-sm-4 col-md-2\">\n            <img src={profile_pic} className=\"img-box img-thumbnail\" />\n          </div>\n          <div className=\"col-sm-6 col-md-4\">\n            <b>Email :</b> <a href=\"mailto:nithish.moudhgalya@gmail.com\"> nithish.moudhgalya@gmail.com </a> <br/>\n            <b>Github :</b> <a href=\"http://www.github.com/NithishB\"> Github Profile </a> <br/>\n            <b>LinkedIn :</b> <a href=\"http://www.linkedin.com/in/nithish-moudhgalya\"> LinkedIn Profile </a> <br/>\n            <b> Address : </b> 29/6, A6 Shanmugapriya Apt, Rangan Street, T-Nagar, Chennai-17, India <br/>\n          </div>\n        </div>\n        <p> I am a Computer Science Undergraduate student from SSN College of Engineering. Hot Coffee and Chips are my favourite sidekick.</p>\n        <p> I love to code, recode and maybe possibly  </p>\n      </div>\n    )\n  }\n}\n\nexport default About\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation'\nimport About from './components/About'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <Navigation />\n        <div id=\"/\" className=\"container\">\n          <About />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile_pic.83b30fb8.jpg\";"],"sourceRoot":""}